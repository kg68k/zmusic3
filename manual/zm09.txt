
	    ＭＥＡＳＵＲＥ９

	スタンダードMIDIファイルと
	ローランドエクスクルーシブ


  ここではZMUSIC Ver.3.0の機能の１つである

ＭＩＤＩ機器の設定をファイルとしてセーブする

機能について解説します。また、MIDI機器のメモリーを

操作するエクスクルーシブメッセージについて具体的な

用例を挙げて解説します。









９．１．  ＭＩＤＩ機器のメモリデータをファイルにセーブする


  ZMUSIC Ver.3.0には常駐後に使用可能となるMIDI受信機能を用いてMIDI機器の状態

（音色や設定など）をファイルに保存することができる。これを利用すればMIDI楽器の

設定状態や音色のデータをX680x0上で管理することが可能となる。ここではこの機能の

具体的な使用方法について述べる。

  まず、MIDI機器側にＭＩＤＩ  ＯＵＴ端子が無くてはならない。さらにMIDI機器側に

機器自身のメモリ内データを外部へ送信する機能が必要となる。ＭＩＤＩ  ＯＵＴ端子

があるような楽器ならば大抵は備わっている機能であるので楽器のマニュアルを参照し

するとよい。(大抵はマニュアルの「ＭＩＤＩ  データダンプ」「バルクダンプ」と

いった項目に載っている)

  次にX680x0のＭＩＤＩ  ＩＮ端子とMIDI機器のＭＩＤＩ  ＯＵＴ端子をＭＩＤＩ

ケーブルで接続する。

  以上の準備が前提となる。

1. ZMSC3.Xの常駐を確認する

2. 楽器側のバルクダンプのメニューを出し確認する

3. コマンドオプション'-A'を使用してZP3.Rを実行する。

	A>ZP3 -A filename

4. 楽器のバルクダンプを実行する

5. 楽器のコンソールに"COMPLETED"等のメッセージを確認するまで待つ

6. [ESC]キーを押してZP3.RのMIDI受信モードを終了させる。

7. '-A'の後ろに指定したファイルネームでフォーマット０の
　 スタンダードMIDIファイルが出力される。

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃			スタンダードMIDIファイルとは			      ┃
┃									      ┃
┃									      ┃
┃　スタンダードMIDIファイルにはフォーマット0,1,2の3種類のフォーマットがあり  ┃
┃									      ┃
┃ます。ZMUSIC Ver.3.0で取り扱えるのはフォーマット0です。		      ┃
┃									      ┃
┃  　簡単に各フォーマットの違いを述べておきます。			      ┃
┃									      ┃
┃  フォーマット0はパートの概念がないフォーマットで、演奏情報は1本の時間軸の  ┃
┃									      ┃
┃中で表されます。MIDIケーブルを通ってきた情報をそのまま時間情報を加えて記録  ┃
┃									      ┃
┃した、というイメージです。音色データなどはよくこのフォーマットで管理される  ┃
┃									      ┃
┃事が多いようです。複数チャンネルで構成されるフォーマット0の演奏データも存在 ┃
┃									      ┃
┃します。そういった演奏データはコンバータソフトウェアを使いフォーマット1     ┃
┃									      ┃
┃に変換することも出来ます。						      ┃
┃									      ┃
┃　フォーマット1はもっとも頻繁に用いられるフォーマットで、演奏データは複数の ┃
┃									      ┃
┃パートで管理されています。トラック(パート)の概念を持った市販のDTMツールは   ┃
┃									      ┃
┃大抵このフォーマットを読み書きできるようです。パートの概念があるためデータ  ┃
┃									      ┃
┃の応用性は高いといえます。						      ┃
┃									      ┃
┃ フォーマット2は複数のテンポを持ったトラックが共存出来るものであまり一般的  ┃
┃									      ┃
┃ではないようです。							      ┃
┃									      ┃
┃  イメージ的にはフォーマット0がたくさん集まってフォーマット1、フォーマット1 ┃
┃									      ┃
┃がたくさん集まってフォーマット2と捉えると分かり易いでしょう。		      ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


９．２．  スタンダードMIDIファイルのMIDI機器への転送


  9.1.の手順で作成したスタンダードMIDIファイル(以下、SMF)を、MIDI機器側へ

転送する方法について解説する。


●Human 68kのコマンドラインから行う場合（その１）


1. ZMSC3.Xの常駐を確認する

2. Human 68kの内部コマンド「COPY」を用いて希望のSMFをシステムファイル名MIDIに
　 転送する。

例

	A>copy filename MIDI


●Human 68kのコマンドラインから行う場合（その２）


1. ZMSC3.Xの常駐を確認する

2. コマンドオプション'-X'を使用してZP3.Rを起動する。'-X'の後ろに転送したいSMF

　 のファイル名を記述する。(出力インターフェースを指定したい場合はZP3.Rの

　　コマンドオプション'-D'を使用する。(MEASURE7参照)

例

	A>ZP3 -X filename


●X-BASICから行う場合


1. ZMSC3.Xの常駐を確認する。

2. MUSICZ3.FNCを組み込んだX-BASICを起動する。

3. 関数zm_transmit_midi_dump()を用いて転送する。

例	(出力MIDIインターフェース番号が2、転送したいSMFのファイル名が
	 "filename.MID"の場合)

	zm_transmit_midi_dump( 2,"filename.MID")


●ZMSから行う場合


　　ZMSコマンド「.SMF」を用いる。

例	(出力MIDIインターフェース番号が2、転送したいSMFのファイル名が
	 "filename.MID"の場合)

	.SMF 2,filename.MID


９．３．  ローランドエクスクルーシブについて


  多くのユーザーがローランド製のMIDI機器を使用していると思われるが、ここでは

そのローランド製のMIDI機器のエクスクルーシブメッセージの使用方法について解説を

行う。

  ZMUSIC Ver.3.0では、X-BASICではMUSICZ3.FNC命令である

	zm_exclusive()

が、ZMSコマンドでは

	.ROLAND_EXCLUSIVE

が、MMLでも

	X

といった専用命令が用意されており、かなり容易にMIDI機器のメモリを書き替える事が

可能となっている。


９．３．１．  マニュアルの後ろを見てみる


ここではZMSコマンド .ROLAND_EXCLUSIVE を使ってＣＭ３２Ｐ(あるいはＣＭ６４の

ＰＣＭ音源パート)のパーシャルリザーブの行い方を例としてローランドエクスクルー

シブの使用方法を解説する。

  まずＣＭ６４のマニュアル33ページを開いてみる。まず'＊６－３'という表に

注目する。この表の中段に

	| 00 04 | 00aa aaa | PARTIAL RESERVE (PART 1) 0-31 |
	| 00 05 | 00aa aaa | PARTIAL RESERVE (PART 2) 0-31 |
	| 00 06 | 00aa aaa | PARTIAL RESERVE (PART 3) 0-31 |
				:
				:
	| 00 09 | 00aa aaa | PARTIAL RESERVE (PART 6) 0-31 |

が見つかるはずである。これを確認したら、次にこの表'＊６－３'のタイトルを見る。

すると

	ＳＹＳＴＥＭ  ＡＲＥＡ

とある。ここで、この表の右にあるアドレスマップからこの'SYSTEM AREA'という

文字列を捜す。すると

	52 00 00

が'SYSTEM AREA'のベース・アドレスということが分かる。つまり、表'＊６－３'の

中のパラメータを設定したい場合は、表の左に書いてあるオフセット・アドレスと

このベース・アドレスを足したアドレスに値を送信すれば良いことになる。この例で

いくと

	52 00 00 ＋ 00 04 ＝ 52 00 04

がパーシャルリザーブのパラメータのアドレスということになる(表'＊６－３'の

タイトルの下をみると「パーシャルリザーブは６パート分を一度に送らなければ

無効です」とあるのでもちろんこれに従うこと)。

  結局、以下のようにコマンドを書けば良いことになる。

	.ROLAND_EXCLUSIVE dev,mdl {    $52,$00,$04
					2
					3
					5
					4
					3
					6}

（１パラメータ毎に改行しているが特に意味はない。$52,00,04がアドレス、それ
  以降がパラメータ）

  この例では、パート1～6、それぞれ2,3,5,4,3,6声をリザーブしている。

もちろんそのMIDI機器の最大同時発声数を超えてはならない。この例では2＋3＋5＋

4＋3＋6＝23で、まだ31－23＝8声分の余裕があることがわかる。

  さて今の例で、dev,mdlというのが出てきたが、これは操作対象の楽器のＩＤ番号の

ことを表している。

  mdlはモデルＩＤと呼ばれるものでメーカーがその楽器に与えた識別番号のこと。

ＭＴ３２/ＣＭ３２Ｌ/ＣＭ３２Ｐ/ＣＭ６４はすべて＄１６と決められている。

ＣＭ６４ならばマニュアルのp28の上部に記載されている。

  devはデバイスＩＤと呼ばれるもので、同じ機種(あるいは同一のデバイスＩＤを

持った)MIDI機器でも、これを変えておけば個別に操作が可能となる、ユーザーが

任意に設定可能な識別番号である。しかしＣＭ３２Ｌ/ＣＭ３２Ｐ/ＣＭ６４は＄１０に

固定である。結局、上の例は

	.ROLAND_EXCLUSIVE $10,$16 {    $52,$00,$04
					2
					3
					5
					4
					3
					6}

ということになる。

  以上の手順をまとめると、

１) 設定したいパラメータの表を捜す

２) 表のタイトルをアドレスマップより捜す

３) 設定したいパラメータのオフセット値と２)で見付けたベースアドレスを加算する

４) ２種類のＩＤを確認してコマンドを書く

となる。


９．３．２．  その他の例


  ＣＭ３２Ｐ(あるいはＣＭ６４のＰＣＭパート)の各パートの受信ＭＩＤＩチャンネル

を設定するときは

	ROLAND_EXCLUSIVE $10,$16 {$52,$00,$0a,0,1,2,3,4,16}

のようになる。この例ではパート1～5をそれぞれチャンネル1～5へ、パート６はＯＦＦ

にしている。ＭＩＤＩチャンネルは通常1～16ということになっているが内部処理的に

は0～15なので注意すること。そういうわけでパラメータの０はＭＩＤＩチャンネル１、

パラメータの１はＭＩＤＩチャンネル２…以下同様ということになる。最後のパラメー

タの16はＭＩＤＩチャンネル17ということではなくそのパートをミュートする(使用し

ない)ということを意味する。多くのローランド製のMIDI機器は

	ＭＩＤＩチャンネル	実際のパラメータ値
		1～16     		0～15
 		ＯＦＦ   		16

ということになっているようだ。

  同様にしてリバーブの設定や各パートの細かい設定(リバーブのON/OFF，キートラン

スポーズの設定など)も行うことができる。もちろん、X-BASIC上でMUSICZ3.FNC命令の

'zm_exclusive()'や、MMLの'X'コマンドを用いても、いままで述べてきた同様

な方法で行うことができる。

  注意点すべきなのは、MIDI機器上のパネルで1～128で使用していた数値パラメータが

ローランドエクスクルーシブを用いて設定する場合には0～127として設定しなくては

ならなくなっていたりすること。他にも－64～＋63で使用していたものが、0～127に

シフトされていたりする。よってパラメータ数値を決定する場合には、事前に機器上

でのパラメータと内部的なパラメータとの対応を十分理解しておく必要がある。
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃			エクスクルーシブ送信後のウェイト		      ┃
┃									      ┃
┃									      ┃
┃  ZMUSIC Ver.3.0では、スタンダードMIDIファイルの転送時などにおいてEOX(END OF┃
┃									      ┃
┃EXCLUSIVE MESSAGE)$F7を送信した場合、その直後、一定時間のウェイトを入れる   ┃
┃									      ┃
┃ようになっています。これはMIDI機器側がエクスクルーシブメッセージを処理するの┃
┃									      ┃
┃に多少の時間を必要とするためです。このウェイトの値はZMSC3.X常駐時のコマンド ┃
┃									      ┃
┃オプション'-X'で設定することができます。				      ┃
┃									      ┃
┃　ただし、MMLの@XやXコマンドを用いてエクスクルーシブメッセージを送信した場合┃
┃									      ┃
┃は、テンポずれを避けるために特にウェイトを設けていません。この場合、	      ┃
┃									      ┃
┃ユーザーが休符などのMIDIメッセージの無送信時間を挿入するなどして適度なウェイ┃
┃									      ┃
┃トを与えて下さい。							      ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
