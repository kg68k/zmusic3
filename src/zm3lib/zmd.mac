*オフセットはいずれの場合もオフセットの存在する次のアドレスが基準とする

***** ZMDヘッダブロック ****

	.offset	0
z_zmusic_id:	ds.l	2	*$1a,'ZmuSiC',ZMD version ID($30)
z_comn_offset:	ds.l	1	*共通コマンドまでのオフセット(0:無し)
z_trk_offset:	ds.l	1	*トラック・チャンネル情報テーブルまでのオフセット(0:無し)
z_ctrl_offset:	ds.l	1	*演奏制御コマンドまでのオフセット(0で全トラック演奏)
z_zmd_size:	ds.l	1	*このZMDファイル全体のサイズ
z_song_offset:	ds.l	1	*歌詞データまでのオフセット
		ds.l	1	*リザーブ
z_total_offset:	ds.l	1	*トータルステップタイムの格納アドレス
z_information:
z_title_offset:	ds.l	1	*タイトル文字列までのオフセット(または最初のコメント文)
z_total_count:	ds.l	1	*Total Step Time
z_play_time:	ds.l	1	*演奏時間(時間/分/秒)	[reserved]
z_meter:	ds.w	1	*拍子(n/m)
z_metronome:	ds.b	1	*メトロノーム速度
		ds.b	1	*reserved
z_key:		ds.w	1	*調号(n個の#/-n個の♭/0はC),(0で長調/1で短調)
z_master_clock:	ds.w	1	*全音符のマスタークロック[192]
z_tempo:	ds.w	1	*初期テンポ[120]
		ds.w	1	*reserved
z_cmn_flag:	ds.l	1	*共通コマンドの使用状態
z_ctrl_flag:	ds.l	1	*制御コマンドの使用状態
z_instrument:	ds.l	1	*使用楽器タイプ(d0:GM d1:GS d2:SC88 d3:MT32 d4:U220 d5:M1)
z_nof_fm_ch:	ds.b	1	*FM音源使用チャンネル数(0-8)
z_nof_ad_ch:	ds.b	1	*ADPCM(PCM)音源使用チャンネル数(0-16)
z_nof_md1_ch:	ds.b	1	*MIDI-1使用チャンネル数(0-16)
z_nof_md2_ch:	ds.b	1	*MIDI-2使用チャンネル数(0-16)
z_nof_md3_ch:	ds.b	1	*MIDI-3使用チャンネル数(0-16)
z_nof_md4_ch:	ds.b	1	*リザーブ
		ds.w	1
z_header_size:	ds.l	0
*タイトル文字は
*	1行目は曲のタイトル。それ以降はコメント。
*	また、曲名/作曲者/編曲者/データ作成者の様な一般的な情報を複数行にわたって
*	記述する場合は以下の文字列で表される情報タイトルの後に記載することと規定する。
*	(情報タイトルの日本語は全角、英字は半角英数大文字のみ、また : は必須)
*曲名:		TITLE:
*作曲者:	COMPOSER:
*編曲者:	ARRANGER:
*作成者:	MANIPULATER:
*作成日:	DATE:		(原曲の作曲年月日はCOPYRIGHT:)
*録音場所	STUDIO:
*使用機器:	INSTRUMENTS:
*ジャンル:	CATEGORY:
*例)
*.comment {
*TITLE: I am a boy, therefore I have balls.
*作曲者:西川善司
*STUDIO:自宅
*ジャンル:童謡
*}
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

***** 共通コマンドZMD *****

CMN_END:	equ	$ff
*$ff(.b)
*共通コマンドZMD終了

	.offset	0
CMN_INIT:		ds.l	1	*初期化
*$00(.b)
*将来の拡張用	$00(.b)
*2bytes

CMN_READ_SUB:		ds.l	1	*サブファイルの読み込みと実行
*$04(.b)
*filename	data....,endcode=0(.b)
*?bytes

*または

*$04(.b)
*0(.b)
*offset(.l)		データが存在するアドレスまでのオフセット
*size(.l)
*10bytes

*CMN_TEMPO:		ds.l	1	*テンポ
*$08(.b)
*tempo(.w)	0-65535
*3bytes

*CMN_MASTER_CLOCK:	ds.l	1	*全音符クロック数登録
*$0c(.b)
*master clock(.w)	0-32767
*3bytes

	ds.l	1	*$04(reserved)
	ds.l	1	*$08(reserved)

CMN_FM_TUNE_SETUP:	ds.l	1	*FM音源チューニング
*$10(.b)
*data...(128bytes)	-128～+127	(@Kレンジ)
*129bytes

CMN_PCM_TUNE_SETUP	ds.l	1	*(AD)PCM音源チューニング
*$14(.b)
*data...(128bytes)	-128～+127	(@Kレンジ)
*129bytes

CMN_VSET:		ds.l	1	*FM音源音色設定
*$18(.b)
*tone number(.w)	0-256*128
*0(.b)			RESERVED
*data...		0)LFRQ
*			1)PMD
*			2)AMD
*			3)SYNC/OM/WF
*			4)PAN/AF
*			5)PMS/AMS
*			6)OP1:DT1/MUL
*			7)OP3:DT1/MUL
*			8)OP2:DT1/MUL
*			9)OP4:DT1/MUL
*			10)OP1:TL
*			11)OP3:TL
*			12)OP2:TL
*			13)OP4:TL
*			14)OP1:KS/AR
*			15)OP3:KS/AR
*			16)OP2:KS/AR
*			17)OP4:KS/AR
*			18)OP1:AME/1DR
*			19)OP3:AME/1DR
*			20)OP2:AME/1DR
*			21)OP4:AME/1DR
*			22)OP1:DT2/2DR
*			23)OP3:DT2/2DR
*			24)OP2:DT2/2DR
*			25)OP4:DT2/2DR
*			26)OP1:D1L/RR
*			27)OP3:D1L/RR
*			28)OP2:D1L/RR
*			29)OP4:D1L/RR
*			30)-45)NAME
*50bytes

CMN_WAVE_FORM:		ds.l	1	*波形メモリ登録
*$1c(.b)
*wave number(.w)	8-255
*data size(.l)		2～	(かならず偶数)
*loop_type(.b)		0:1shot  1:loop  2:alternative-loop
*loop start offset(.l)	0～	(かならず偶数)	(ループなしの場合は0)
*loop end offset(.l)	0～	(かならず偶数)
*				(オフセット値はループ終端データのあるオフセットアドレス+2)
*				(ループなしの場合は最終データの存在するオフセットアドレス+2)
*loop time(.l)		0:∞,1～
*reserved(.l)		リザーブ
*str length(.b)		0-255		コメント文字列長
*string data...				コメント文字列(no endcode)
*			(.even処理)
*wave data(.w)		(必ず偶数アドレスから...)
*25-?bytes

CMN_REGISTER_PCM:	ds.l	1	*(AD)PCM登録
*$20(.b)
*flag(.w)		d15:PCMデータ加工オプションパラメータの有無(0:no 1:exist)
*			d0-d14:1-32767	次の共通コマンドまでのオフセット
*			d0-d14:0は15ビットでは表現出来ない場合を表すが通常は無視してよい
*note/timbre no.(.w)	note number(0-32767)/timbre number($8000+0-32767)
*regtype(.b)		-1:ADPCM  0:V2互換  1:16bitPCM  2:8bitPCM
*original key code(.b)	0-127:key code  128:no original key
*reserved(.w)
*tone name(.b)...0(.b)	TONE NAME(最大32バイト)
*filename(.b)...0(.b)	(filename).l=$00xxxxxxの場合はコピーノート番号指定
*PCM PROCESSING command(PPC)....
*21-?bytes

	*A Contents of PPC

PPC_END:	equ	$00
	*$00(.w) PROCESSING END

PPC_PITCH:	equ	$02
	*$02(.w) PITCH TRANSFORM
	*offset count(.l)	値は物理サイズではなくてデータカウント
	*processing count(.l)	値は物理サイズではなくてデータカウント
	*			0はオフセット以降全てを加工範囲とする
	*source frq(.w)		1-65535
	*dest.  frq(.w)		1-65535
	*13bytes
	*※データカウントは登録タイプによってその次元は変化する
	*	登録タイプがADPCMのときデータ1カウントは
	*	物理量1バイトに相当する
	*	登録タイプが16bitPCMの時にはデータ1カウントは
	*	物理量2バイトに相当する
	*以下同様

PPC_VOLUME:	equ	$04
	*$04(.w) VOLUME TRANSFORM
	*offset count(.l)	値は物理サイズではなくてデータカウント
	*processing count(.l)	値は物理サイズではなくてデータカウント
	*			0はオフセット以降全てを加工範囲とする
	*volume(.w)		0-65535
	*11bytes

PPC_MIX:	equ	$06
	*$06(.w) MIX #1
	*mix source(.l)		0-32767:tone  $8000+(0-32767):timbre
	*offset count(.l)	値は物理サイズではなくてデータカウント(負の値も可能)
	*PPC...
	*endcode(.b)		0でない場合はミックスソースをPPCにて加工する/0=終了
	*10-?bytes

	*$06(.w) MIX #2
	*filename		ファイルネーム文字列
	*endcode(.b)		0(.b)
	*offset count(.l)	値は物理サイズではなくてデータカウント(負の値も可能)
	*PPC...
	*endcode(.b)		0でない場合はミックスソースをPPCにて加工する/0=終了
	*8-?bytes

PPC_TRUNCATE:	equ	$08
	*$08(.w) TRUNCATE
	*offset count(.l)	値は物理サイズではなくてデータカウント
	*truncate count(.l)	値は物理サイズではなくてデータカウント
	*			0はオフセット以降全てを加工範囲とする
	*9bytes

PPC_REVERSE:	equ	$0a
	*$0a(.w) REVERSE
	*offset count(.l)	値は物理サイズではなくてデータカウント
	*reverse count(.l)	値は物理サイズではなくてデータカウント
	*			0はオフセット以降全てを加工範囲とする
	*9bytes

PPC_FADE:	equ	$0c
	*$0c(.w) FADE
	*offset count(.l)	値は物理サイズではなくてデータカウント
	*fade count(.l)		値は物理サイズではなくてデータカウント
	*			0はオフセット以降全てを加工範囲とする
	*start level(.w)	0-128-65535(128は原音レベル)
	*end level(.w)		0-128-65535(128は原音レベル)
	*13bytes

PPC_BEND:	equ	$0e
	*$10(.w) BEND
	*offset count(.l)	値は物理サイズではなくてデータカウント
	*bend count(.l)		値は物理サイズではなくてデータカウント
	*			0はオフセット以降全てを加工範囲とする
	*start freq(.w)		1-65535
	*end freq(.w)		1-65535
	*13bytes

PPC_LOOP:	equ	$10
	*$12(.w) SET LOOP POINT
	*omt(.b)		d0:loop start point  d1:loop end point
	*			パラメータが後続する場合はomtフラグの対応ビット=1
	*loop type(.b)		ループタイプ
	*loop time(.l)		ループ回数(0:∞)
	*loop_start(.l)		値は物理位置ではなくてデータカウント(omt.d0=1の時だけ設定)
	*loop end(.l)		値は物理位置ではなくてデータカウント(omt.d1=1の時だけ設定)
	*6-14bytes

PPC_CONNECT:	equ	$12
	*$14(.w) CONNECT #1
	*$0000(.w)
	*connect source(.w)	0-32767:tone  $8000+(0-32767):timbre
	*offset count(.l)	値は物理サイズではなくてデータカウント(負の値も可能)
	*PPC...
	*endcode(.b)		0でない場合はコネクトソースをPPCにて加工する/0=終了
	*11-?bytes

	*$14(.w) CONNECT #2
	*filename		ファイルネーム文字列
	*endcode(.b)		0(.b)
	*offset count(.l)	値は物理サイズではなくてデータカウント(負の値も可能)
	*PPC...
	*endcode(.b)		0でない場合はコネクトソースをPPCにて加工する/0=終了
	*9-?bytes

PPC_DELETE:	equ	$14
	*$14(.w) DELETE
	*offset count(.l)	値は物理サイズではなくてデータカウント
	*truncate count(.l)	値は物理サイズではなくてデータカウント
	*			0はオフセット以降全てを削除範囲とする
	*9bytes

PPC_DISTORTION:	equ	$16
	*$16(.w) DISTORTION
	*offset count(.l)	値は物理サイズではなくてデータカウント
	*processing count(.l)	値は物理サイズではなくてデータカウント
	*			0はオフセット以降全てを加工範囲とする
	*volume(.w)		0-65535
	*cut off level(.w)	0-32767(これ以下のレベルに丸める)
	*13bytes

PPC_SMOOTH:	equ	$18
	*$18(.w) SMOOTH
	*offset count(.l)	値は物理サイズではなくてデータカウント
	*reverse count(.l)	値は物理サイズではなくてデータカウント
	*			0はオフセット以降全てを加工範囲とする
	*repeat(.w)		0～65535(処理の繰り返し回数。0は1回,65535は65536回)
	*11bytes

PPC_ALTERATION:	equ	$40
	*$40(.w) ALTERATION
	*offset count(.l)	値は物理サイズではなくてデータカウント
	*alteration count(.l)	値は物理サイズではなくてデータカウント
	*			0はオフセット以降全てを加工範囲とする
	*9bytes

CMN_ERASE_PCM:	ds.l	1	*(AD)PCM登録削除
*$24(.b)
*note/timbre no.(.w)	note number(0-32767)/timbre number($8000+0-32767)
*3bytes

CMN_BLOCK_PCM:	ds.l	1	*ZPD読み込み
*$28(.b)
*filename(.b)*?
*0(.b)
*3～?bytes

*または

*$28(.b)
*ZPD.ID(.b)		0:V1～2 1:V3 2:PDX
*offset(.l)		データが存在するアドレスまでのオフセット
*6bytes

CMN_CRNT_MIDI_IN:	ds.l	1	*カレントMIDI-IN
*$2c(.b)
*MIDI I/F number(.b)	0-3
*2bytes

CMN_CRNT_MIDI_OUT:	ds.l	1	*カレントMIDI-OUT
*$30(.b)
*MIDI I/F number(.b)	0-3
*2bytes

CMN_MIDI_TRANSMISSION:	ds.l	1	*MIDIデータ転送
*$34(.b)
*MIDI I/F(.b)		インターフェース番号:0-3/(-1:カレントMIDI-OUT)
*str length(.b)		0-255		コメント文字列長
*string data...				コメント文字列(no endcode)
*transmit data length(.l)		転送データ長
*data....				転送データ
*8-?bytes

CMN_MIDI_DUMP:		ds.l	1	*$34)trans midi data dump
*$38(.b)
*MIDI I/F(.b)		インターフェース番号:0-3/(-1:カレントMIDI-OUT)
*filename(.b)*?
*0(.b)
*4-?bytes

*または

*$38(.b)
*MIDI I/F(.b)		インターフェース番号:0-3/(-1:カレントMIDI-OUT)
*0(.b)
*offset(.l)		データが存在するアドレスまでのオフセット
*7bytes
			ds.l	1	*$3c)reserved

CMN_COMMENT:		ds.l	1	*$40)comment
*$40(.b)
*string(.b)
*0(.b)
*3-?bytes

CMN_PRINT:		ds.l	1	*$44)print message
*$44(.b)
*string(.b)
*0(.b)
*3-?bytes

CMN_DUMMY:		ds.l	1	*$48)dummy code
*$48(.b)
*1byte

CMN_HALT:		ds.l	1	*$4c)halt
*$4c(.b)
*interval(.l)
*5bytes
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

***** 制御コマンドZMD *****

CTRL_END:	equ	$ff
*制御コマンドZMD終了

	.offset	0		*ctrl_cmd_tbl
CTRL_PLAY:	ds.l	1	*play
*$00(.w)
*track number(.w),track number(.w),…,track number(.w),-1.w
*4-?bytes

CTRL_STOP:	ds.l	1	*stop
*$04(.w)
*track number(.w),track number(.w),…,track number(.w),-1.w
*4-?bytes

CTRL_CONT:	ds.l	1	*cont
*$08(.w)
*track number(.w),track number(.w),…,track number(.w),-1.w
*4-?bytes

CTRL_MFADER:	ds.l	1	*master fader
*$0c(.w)
*device-id(.w)	0,1,$8000,$8001,$8002
*omt(.b)		d0:speed,d1:src level,d2:dest level,bit=1でそのパラメータが存在
*speed(.w)	0-65535
*start(.b)	0-128
*end(.b)		0-128
*5-8bytes
*
*全デバイスが操作対象の場合
*$0c(.w)
*-1(.w)
*omt(.b)		d0:speed,d1:src level,d2:dest level,bit=1でそのパラメータが存在
*speed(.w)	0-65535
*start(.b)	0-128
*end(.b)		0-128
*5-8bytes

CTRL_TFADER:	ds.l	1	*track fader
*$10(.w)
*track number(.w)	0-65534
*omt(.b)		d0:speed,d1:src level,d2:dest level,bit=1でそのパラメータが存在
*speed(.w)	0-65535
*start(.b)	0-128
*end(.b)		0-128
*5-8bytes
*
*全トラックが操作対象の場合
*$10(.w)
*-1(.w)
*omt(.b)		d0:speed,d1:src level,d2:dest level,bit=1でそのパラメータが存在
*speed(.w)	0-65535
*start(.b)	0-128
*end(.b)		0-128
*5-8bytes

CTRL_MASK:	ds.l	1	*mask
*$14(.w)
*{
*	track number(.w)	0-65534
*	Mask Mode(.w)	マスクモード:0=MASK OFF, 1=REVERSE, -1=MASK ON
*}×n
*-1(.w)	endcode
*8-?bytes
*
*全トラックが操作対象の場合
*$14(.w)
*-1(.w)
*Maske Mode(.w)		マスクモード:0=MASK OFF, 1=REVERSE, -1=MASK ON
*6bytes
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

***** トラック・チャンネル情報テーブル *****

	.offset	0
ti_n_of_tracks:	ds.w	1	*.w トラック数-1(0-65535)
	.offset	0
ti_track_stat:	ds.b	1	*.b $00=performance,$80=非演奏trackマーク(詳しくはZMID.MAC参照)
ti_track_mode:	ds.b	1	*.b $80=no key off(詳しくはZMID.MAC参照)
ti_trkfrq:	ds.b	1	*.b 割り込み比率(0:normal,1:2回に1回,2:3回に一回,...)
		ds.b	1	*.b
ti_type:	ds.w	1	*.w デバイスタイプ(FM:0 ADPCM:1 MIDI:$8000～$8003 PATTERN:$7fff)
ti_ch:		ds.w	1	*.w チャンネル(0-15)
ti_play_data:	ds.l	1	*.l 演奏データまでのoffset
ti_extra_info:	ds.l	1	*.l トラック追加情報までのオフセット(0の場合はない)
ti_size:	equ	16
ti_size_:	equ	4
*以下総トラック数分続く

*トラック追加情報(省略可能)
	.offset	0
tx_total_step:		ds.l	1	*.l	トラック総ステップタイム
tx_checksum:		ds.l	1	*.l	トラックチェックサム
tx_n_of_measure:	ds.l	1	*.l	総小節数
tx_comment_length:	ds.l	1	*.l	トラックコメント文字列長(0:none)
tx_comment:		ds.l	0	*文字列(no endcode)
tx_size:	equ	16	*コメント文字列を除いたトラック追加情報のサイズ
tx_size_:	equ	4
*以降文字列
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

***** 演奏トラックのZMD *****

*[] default value

*ノート
*note number(.b)	0-127(.b)			→k_note
*step time(v)	0-127(.b), 32768+(0-32767)(.w)	→p_step_time
*gate time(v)	$8000(.w):tie,
*		0-127(.b), 32768+(128-32767)(.w)	→k_gate_time
*velocity(.b)	0-127, 128:use default,		→p_velo
*		129～191,192,193～255 : -63～-1,0,1～63
*4-6bytes
*-------------------------------------------------$80～(HAS STEP TIME系)
*休符
rest_zmd:	equ	$80
*$80(.b)
*step time(v)	0-127(.b), 32768+(0-32767)(.w)		→p_step_time
*gate time(v)	$8000(.w):tie,
*		0-127(.b), 32768+(128-32767)(.w)	→k_gate_time
*3-5bytes

*ウェイト
wait_zmd:	equ	$81
*$81(.b)
*step time(v)	0-127(.b), 32768+(0-32767)(.w)		→p_step_time
*2-3bytes

*トラックディレイ
track_delay_zmd:	equ	$82
*$82(.b)
*step time(v)	0-127(.b), 32768+(0-32767)(.w)			→p_step_time
*2-3bytes

*MX系ノート
mx_key_zmd:	equ	$83
*$83(.b)
*note number(.b)	0-127	(+$80だとtie)			→k_note
*step time(v)	0-127(.b), 32768+(0-32767)(.w)		→p_step_time
*3-6bytes

*ポルタメント
portament_zmd:	equ	$84
*$84(.b)
*note number(.b)	0-127	$80+(0-127)の場合はディレイ有り		→k_note
*dest. note(.b)		0-127	$80+(0-127)の場合はポルタメントタイム有り
*delay(v)	0-127(.b), 32768+(0-32767)(.w)			→p_port_dly
*port.time(v)	0-127(.b), 32768+(0-32767)(.w)			→p_port_cnt
*step time(v)	0-127(.b), 32768+(0-32767)(.w) (step≠0)	→p_step_time
*gate time(v)	$8000(.w):tie,
*		0-127(.b), 32768+(128-32767)(.w)		→k_gate_time
*velocity(.b)	0-127, 128:use default,				→p_velo
*		129～191,192,193～255 : -63～-1,0,1～-63
*6-11bytes

*ポルタメント
portament2_zmd:	equ	$85
*$85(.b)
*note number(.b)	0-127	$80+(0-127)の場合はディレイ有り		→k_note
*dest. note(.b)	0-127	$80+(0-127)の場合はポルタメントタイム有り
*delay(v)	0-127(.b), 32768+(0-32767)(.w)			→p_port_dly
*port.time(v)	0-127(.b), 32768+(0-32767)(.w)			→p_port_cnt
*step time(v)	0-127(.b), 32768+(0-32767)(.w) (step≠0)	→p_step_time
*gate time(v)	$8000(.w):tie,
*		0-127(.b), 32768+(128-32767)(.w)		→k_gate_time
*velocity(.b)	0-127, 128:use default,				→p_velo
*		129～191,192,193～255 : -63～-1,0,1～-63
*6-11bytes
*-------------------------------------------------$90～(2bytes系)
*音量		V/@V
volume_zmd:	equ	$90
*$90(.b)
*volume(.b)	0-127		128段階指定時		→p_vol
*		$80+(0～16)	16段階指定時
*2bytes

*相対音量	_~
rltv_vol_zmd:	equ	$91				→p_vol
*$91(.b)
*value(.b)	-128～127
*2bytes

*相対音量2
rltv_vol2_zmd:	equ	$92				→p_vol
*$92(.b)
*value(.b)	-128～127
*2bytes

*ベロシティ	U/@U
velocity_zmd:	equ	$93
*$93(.b)
*velocity(.b)	0-127		128段階指定時		→p_velo
*		$80+(0～16)	16段階指定時
*2bytes

*相対ベロシティ	U±/@U±
rltv_velo_zmd:	equ	$94				→p_velo
*$94(.b)
*value(.b)	-128～127
*2bytes

*ピッチモジュレーション・モード	M
pmod_mode_zmd:	equ	$95
*$95(.b)
*pmod mode(.b)	-1:normal  0:FM  1:MIDI			→p_pmod_mode
*2bytes

*ピッチモジュレーション・スイッチ	@M
pmod_sw_zmd:	equ	$96
previous_on:	equ	$02
*$96(.b)
*switch(.b)	[0]:off  $ff:1/8mode  $01:optional 8 point mode	→p_pmod_sw
*		$02:on by previous mode
*2bytes

*ピッチモジュレーション同期設定 H
pmod_sync_zmd:	equ	$97
*$97(.b)
*Sync Mode(.b)	d7:normal sync		0:off [1]:on		→p_pmod_flg
*		d6:tie sync		[0]:off 1:on
*		d5:rest sync		[0]:off 1:on
*		d4:keyon move		[0]:no  1:yes
*		d3:keyon move rest case	[0]:no	1:yes
*Delay(.w)	同期ディレイ:1～65535(0の場合は無指定を意味する)→p_pmod_syncnt
*4bytes

*オートベンド・スイッチ
bend_sw_zmd:	equ	$98
*$98(.b)
*switch(.b)	[0]:off  1:on				→p_bend_sw
*2bytes

*アフタータッチシーケンス・スイッチ
aftc_sw_zmd:	equ	$99
*$99(.b)
*switch(.b)	[0]:off  $ff:1/8mode  $01:optional 8 point mode	→p_aftc_sw
*		$02:on by previous mode
*2bytes

*アフタータッチシーケンス同期設定
aftc_sync_zmd:	equ	$9a
*$9a(.b)
*sync mode(.b)	d7:normal sync		0:off [1]:on		→p_aftc_flg
*		d6:tie sync		[0]:off 1:on
*		d5:rest sync		[0]:off 1:on
*Delay(.w)	同期ディレイ:1～65535(0の場合は無指定を意味する)→p_aftc_syncnt
*4bytes

*エンハンスドベロシティシーケンス・スイッチ
vseq_sw_zmd:	equ	$9b
*$9b(.b)
*switch(.b)	[0]:off   $01:optional 8 point mode	→p_arcc_sw+p_vseq_param
*		$02:on by previous mode
*2bytes

*アゴーギク・スイッチ
agogik_sw_zmd:	equ	$9c
*$9c(.b)
*switch(.b)	[0]:off  $ff:1/8mode  $01:optional 8 point mode
*		$02:on by previous mode
*							→(agogik_work_ptr)+p_pmod_sw
*2bytes

*アゴーギク同期設定
agogik_sync_zmd:	equ	$9d
*$9d(.b)
*sync mode(.b)	d7:normal sync		[0]:off 1:on		→p_agogik_flg
*		d6:tie sync		[0]:off 1:on
*		d5:rest sync		[0]:off 1:on
*		d4:keyon move		[0]:no  1:yes
*		d3:keyon move rest case	[0]:no	1:yes
*		d2:measure sync		[0]:no	1:yes
*Delay(.w)	同期ディレイ:1～65535(0の場合は無指定を意味する)→p_agogik_count
*4bytes

*タイ・モード	@J
tie_mode_zmd:	equ	$9e
*$9e(.b)
*tie mode	0:normal  1:special			→d3 of p_md_flg(a5)
*2bytes

*PCM再生モード
pcm_mode_zmd:	equ	$9f
*$9f(.b)
*PCM mode	0:tone mode  1:timbre mode		→d2 of p_md_flg(a5)
*2bytes
*-------------------------------------------------$a0～(2bytes系)
*パン 絶対指定	P/@P
panpot_zmd:	equ	$a0
*$a0(.b)
*pan(.b)		0-127:L～M～R  128:off			→p_pan
*2bytes

*パン 相対指定	P/@P
rltv_pan_zmd:	equ	$a1
*$a1(.b)
*pan(.b)		-128～127				→p_pan
*2bytes

*スロットマスク
slot_mask_zmd:	equ	$a2
*$a2(.b)
*mode(.b)	%0000000～%1111000	d3:OP1,d4:OP2,d5:OP3,d6:OP4
*					bit=1:off,bit=0:on
*2bytes

*ダンパー(ホールド)	@D
damper_zmd:	equ	$a3
*$a3(.b)
*value(.b)	0-63:off  64-127:on			→p_damper
*2bytes

*ノン・オフ・モード	@R
track_mode_zmd:	equ	$a4
*$a4(.b)
*value(.b)	$00:通常  	$80:ノートオフなし	→p_track_mode
*2bytes

*ベンドレンジ変更	@G
bend_range_zmd:	equ	$a5
*$a5(.b)
*range(.b)	0-127	[12]				→p_@b_range
*2bytes

*周波数変更		@F
frq_chg_zmd:	equ	$a6
*$a6(.b)
*FRQ(.b)		0-6	[4]				→p_frq
*2bytes

*チャンネルプレッシャー
ch_pressure_zmd:	equ	$a8
*$a8(.b)
*pressure(.b)	0-127
*2bytes

*相対チャンネルプレッシャー
rltv_ch_pressure_zmd:	equ	$a9
*$a9(.b)
*pressure(.b)	-128～127	(相対演算はvelocityと行われるが演算結果は
*2bytes				 p_velo(a5)には反映されない)

*強制キーオフ		`
kill_note_zmd:	equ	$aa
*$fd(.b)
*mode(.b)	0:通常キーオフ 1:完全消音(M_STOP相当) 2:完全消音して演奏も終了
*		-1:全トラック演奏終了
*2byte

*キートランスポーズ	K
key_transpose_zmd:	equ	$ab
*$ab(.b)
*value(.b)	-128～+127
*2bytes

*FM/PCMトラックボイスリザーブ	[VOICE_RESERVE]	→p_voice_rsv
voice_reserve_zmd:	equ	$ac
*$ac(.b)
*n of voices(.b)	0-255:1～256
*2bytes

*ベロシティ同期設定
vseq_sync_zmd:	equ	$ad
*$ad(.b)
*sync mode(.b)	d7:小節線同期				[0]:off 1:on	→p_arcc_flg+p_vseq_param
*		d6:ベロシティが指定されているケースでも [0]:off 1:on
*		   ダミーで割り当てるか
*		d5:休符割り当て				[0]:off 1:on
*Delay(.w)	同期ディレイ:1～65535(0の場合は無指定を意味する)	→p_arcc_syncnt+p_vseq_param
*4bytes
*-------------------------------------------------$b0～(3bytes系)
*ピッチモジュレーション波形セレクト S
pmod_wf_zmd:	equ	$b0
*$b0(.b)
*wave form(.w)	0-7:preset waveform	$8000+0～32767:user waveform
*							→p_pmod_wf
*3bytes

*アゴーギク波形セレクト
agogik_wf_zmd:	equ	$b1
*$b1(.b)
*wave form(.w)	0-7:preset waveform	$8000+0～32767～:user waveform
*							→(agogik_work_ptr)+p_pmod_wf
*3bytes

*V2コンパチ・音長0ノート(発音のみ行う)
len0_note_zmd:	equ	$b2
*$b2(.b)
*note(.b)	0-127
*velocity(.b)	0-127, 128:use default,		→p_velo
*		129～191,192,193～255 : -63～-1,0,1～63
*3bytes

*ＡＲＣＣ・スイッチ	@A
arcc_sw_zmd:	equ	$b3
*$b3(.b)
*arcc no(.b)	(0-3)×2
*switch(.b)	[0]:off  $ff:1/8mode  $01:optional 8 point mode
*		$02:on by previous mode
*						→p_arcc_sw+p_arcc_param+(0-3)*trwk_size
*3bytes

*ＡＲＣＣ・モード	M
arcc_mode_zmd:	equ	$b4
*$b4(.b)
*arcc no(.b)	(0-3)×2
*arcc mode(.b)	minus:normal  plus:extended mode	→p_arcc_mode
*3bytes

*ＡＲＣＣ同期設定	H
arcc_sync_zmd:	equ	$b5
*$b5(.b)
*arcc no(.b)	(0-3)×2
*sync mode(.b)	d7:normal sync		0:off [1]:on		→p_arcc_flg
*		d6:tie sync		[0]:off 1:on
*		d5:rest sync		[0]:off 1:on
*		d4:keyon move		[0]:no  1:yes
*		d3:keyon move rest case	[0]:no	1:yes
*Delay(.w)	同期カウント:1～65535(0の場合は無指定を意味する)→p_arcc_syncnt
*5bytes

*OPMレジスタ書き込み	[OPM]
opm_regset_zmd:	equ	$b6
*$b6(.b)
*reg.number(.b)	$80+04:NFRQ $80+05:NE  $80+06:LFRQ $80+07:PMD  $80+08:AMD  $80+09:WF
*		$80+10:CON  $80+11:FB  $80+12:PAN  $80+13:AMS  $80+14:PMS
*または
*		 (0:OP1,1:OP3,2:OP2,3:OP4)*16
*		+(0:MUL,1:DT1,2:TL,3:AR,4:KS,5:1DR,6:AMS-EN,7:2DR,8:DT2,9:RR,10:1DL)
*data(.b)	0-255
*3bytes

*相対OPMレジスタ書き込み	[OPM]
rltv_opm_regset_zmd:	equ	$b7
*$b7(.b)
*reg.number(.b)	$80+04:NFRQ $80+05:NE  $80+06:LFRQ $80+07:PMD  $80+08:AMD  $80+09:WF
*		$80+10:CON  $80+11:FB  $80+12:PAN  $80+13:AMS  $80+14:PMS
*または
*		 (0:OP1,1:OP3,2:OP2,3:OP4)*16
*		+(0:MUL,1:DT1,2:TL,3:AR,4:KS,5:1DR,6:AMS-EN,7:2DR,8:DT2,9:RR,10:1DL)
*data(.b)	-128～127
*3bytes

*ディチューン @B range
detune_@b_zmd:	equ	$b8
*$b8(.b)
*detune(.w)	-8192～8191			→p_detune
*3bytes

*ディチューン @K range
detune_@k_zmd:	equ	$b9
*$b9(.b)
*detune(.w)	-7680～7680			→p_detune
*3bytes

*相対ディチューン @B range
rltv_@b_zmd:	equ	$ba
*$ba(.b)
*value(.w)	-8192～8191			→p_detune
*3bytes

*相対ディチューン @K range
rltv_@k_zmd:	equ	$bb
*$bb(.b)
*value(.w)	-7680～7680			→p_detune
*3bytes

*レジスタ書き込み(コントロールチェンジ設定)	Y
reg_set_zmd:	equ	$bc
*$bc(.b)
*register(.b)	0-255
*data(.b)	0-255
*3bytes

*強制再演奏		Jn
forceplay_zmd:	equ	$bd
*$bd(.b)
*track(.w)	0-65534
*3bytes

*トラック同期		Wn
send_sync_zmd:	equ	$be
*$be(.b)
*track(.w)	0-65535
*3bytes

*Q/@Qコマンド
Q_gate_zmd:	equ	$bf
*$bf(.b)
*Q/@Q value(.w)	0-256:Q case(gate=(step*Q)/256  -1～-32768:@Q case(gate=step+@Q)
*						→p_Q_gate
*3bytes
*-------------------------------------------------$c0～(3～5bytes系)
*ポリフォニックプレッシャー
polyphonic_pressure_zmd:	equ	$c0
*$c0(.b)
*note number(.b)	      0-127:プレッシャー値は絶対指定
*		128+(0-127):プレッシャー値は相対指定 
*pressure(.b)	0-127		(相対演算はvelocityと行われるが演算結果は
*		-127～+127	 p_velo(a5)には反映されない)
*3bytes

*テンポ(タイマー値)	@T
tempo_@t_zmd:	equ	$c1
*$c1(.b)
*timer value(.w)	0-65535					→timer_value,m_tmp_buf
*3bytes

*相対テンポ(タイマー値)	@T
rltv_@t_zmd:	equ	$c2
*$c2(.b)
*timer value(.w)	-32768～32767				→timer_value,m_tmp_buf
*3bytes

*テンポ			T
tempo_t_zmd:	equ	$c3
*$c3(.b)
*tempo value(.w)	0-65535					→timer_value,m_tmp_buf
*3bytes

*相対テンポ		T
rltv_t_zmd:	equ	$c4
*$c4(.b)
*tempo value(.w)	-32768～32767				→timer_value,m_tmp_buf
*3bytes

*シーケンスコマンド	[D.C.] [DO] [LOOP] [!] [@]
seq_cmd_zmd:	equ	$c5
*$c5(.b)
*func no.(.b)	0:d.c.  1:do  2:!  3:@
DC_zmd:		equ	0
DO_zmd:		equ	1
J1_zmd:		equ	2
J2_zmd:		equ	3
KEY_zmd:	equ	4
METER_zmd:	equ	5
end_of_scc:	equ	5	*最終cmd fnc no.
*n of param(.b)	0-255
*params(.b)	...
*3-?bytes

*音色バンク切り換え	I
bank_select_zmd:	equ	$c6
*$c6(.b)
*bank_msb(.b)	0-127	上位バイト	(負値の場合は無指定)
*bank_lsb(.b)	0-127	下位バイト	(負値の場合は無指定)
*3bytes

*音色切り換え	@
timbre_zmd:		equ	$c7
*$c7(.b)
*tone number(.w)	0-32767				→p_pgm
*3bytes

*音色切り換え	[TIMBRE]
timbre2_zmd:	equ	$c8
*$c8(.b)
*tone number(.w)	0-32767				→p_pgm
*3bytes

*ＡＲＣＣ波形セレクト S
arcc_wf_zmd:	equ	$c9
*$c9(.b)
*arcc no(.b)	(0-3)×2
*wave form(.w)	0-7:preset waveform	$8000+0～32767:user waveform
*							→p_arcc_wf
*4bytes

*楽器ID設定	@I
ID_set_zmd:	equ	$ca
*$ca(.b)
*maker(.b)	0-127:メーカーID	(負値の場合は無指定)	→p_maker
*device(.b)	0-127:デバイスID	(負値の場合は無指定)	→p_device
*module(.b)	0-127:モジュールID	(負値の場合は無指定)	→p_module
*4bytes

*小節ジャンプ
jump_ope3_zmd:	equ	$cb
*$cb(.b)
*measure no.(.l)
*5bytes

*チャンネル・アサイン
asgn_chg_zmd:	equ	$cc
*$cc(.b)
*type(.w)	FM:0 ADPCM:1 MIDI:$8000～$8003		→p_type
*ch(.w)		0-32767					→p_ch
*5bytes

*リピート開始	|:
repeat_start_zmd:	equ	$cd
*$cd(.b)
*rep. count(.w)	0-65534:1-65535times	[2]
*rep. work(.w)
*5bytes

*リピート終端	:|
repeat_end_zmd:		equ	$ce
*$ce(.b)
*offset(.l)	repeat_start_zmdのrep. countまでのオフセット
*5bytes

*NRPN		@Y
NRPN_zmd:	equ	$cf
*$cf(.b)
*address H(.b)	0-127
*address L(.b)	0-127
*data H(.b)	0-127(128以上の場合は省略)
*data L(.b)	0-127(128以上の場合は省略)
*5bytes
*-------------------------------------------------$d0～(5～?bytes系)
*SEGNO		[segno]
segno_zmd:	equ	$d0
*$d0(.b)
*offset(.l)	D.S.flagまでのオフセット(0の場合はコマンド無視)
*5bytes

*CODA		[coda]
coda_zmd:	equ	$d1
*$d1(.b)
*offset(.l)	CODA flagまでのオフセット
*5bytes

*スキップZMD
skip_zmd:	equ	$d2
*$d2(.b)
*mode(.b)	0:offset 1:absolute
*offset(.l)	mode=0の場合は相対アドレスジャンプ,1の場合は絶対アドレスに相当する
*6bytes

*D.S.		[D.S.]
ds_zmd:		equ	$d3
*$d3(.b)
*D.S.flag(.b)	d7:segno設定があったか(1:done)  d6:d.s.処理をしたか(1:done)
*offset(.l)	segno_zmdの次のアドレスまでのオフセット	→D.S.処理をしたらp_fine_flgをセット
*6bytes

*to CODA	[toCoda]
tocoda_zmd:	equ	$d4
*$d4(.b)
*coda flag(.b)	d7:coda設定があったか(1:done)  d6:tocoda処理をしたか(1:done)
*offset(.l)	coda_zmdの次のアドレスまでのオフセット(0の場合はコマンド無視)
*6bytes

*ＧＯＳＵＢ
gosub_zmd:	equ	$d5
*$d5(.b)
*track no.(.w)	0-65534,65535(pattern)
*offset(.l)	飛び先オフセットアドレス
*7bytes

*チャンネル・フェーダー
ch_fader_zmd:	equ	$d6
*$d6(.b)
*device(.w)	0,1,$8000,$8001,$8002
*ch(.w)		0-32767
*omt(.b)		d0:speed,d1:src level,d2:dest level,bit=1でそのパラメータが存在
*speed(.w)	0～65535 0:でフェーダーは動かない
*src level(.b)	0-128
*dest level(.b)	0-128
*6-9bytes
*
*チャンネルフェーダー(その2:カレントMIDIインターフェース)
*$d6(.b)
*device(.w)	$7ffd
*ch(.w)		0-32767
*omt(.b)		d0:speed,d1:src level,d2:dest level,bit=1でそのパラメータが存在
*speed(.w)	0～65535 0:でフェーダーは動かない
*src level(.b)	0-128
*dest level(.b)	0-128
*6-9bytes
*
*チャンネルフェーダー(その3:全チャンネル/全デバイスケース)
*$d6(.b)
*device(.w)	0,1,$8000,$8001,$8002 /	-1:で全デバイス
*ch(.w)		0-32767		      /	-1:で全チャンネル
*omt(.b)		d0:speed,d1:src level,d2:dest level,bit=1でそのパラメータが存在
*speed(.w)	0～65535 0:でフェーダーは動かない
*src level(.b)	0-128
*dest level(.b)	0-128
*6-9bytes
*
*チャンネルフェーダー(その4:トラックケース1)
*$d6(.b)
*device(.w)	$7fff
*track no.(.w)	0～65534		-1:全トラック
*omt(.b)		d0:speed,d1:src level,d2:dest level,bit=1でそのパラメータが存在
*speed(.w)	0～65535 0:でフェーダーは動かない
*src level(.b)	0-128
*dest level(.b)	0-128
*6-9bytes
*
*チャンネルフェーダー(その5:トラックケース2)
*$d6(.b)
*device(.w)	$7ffe
*track ID.(.w)	0:このトラック		-1:全トラック
*omt(.b)		d0:speed,d1:src level,d2:dest level,bit=1でそのパラメータが存在
*speed(.w)	0～65535 0:でフェーダーは動かない
*src level(.b)	0-128
*dest level(.b)	0-128
*6-9bytes

*マスター・フェーダー
master_fader_zmd:	equ	$d7
*$d7(.b)
*device-id(.w)	0,1,$8000,$8001,$8002
*omt(.b)		d0:speed,d1:src level,d2:dest level,bit=1でそのパラメータが存在
*speed(.w)	0-65535	 0:でフェーダーは動かない
*src level(.b)	0-128
*dest level(.b)	0-128
*4-7bytes
*
*マスターフェーダー(全デバイスを操作対象としたケース)
*$d7(.b)
*device-id(.w)	-1
*omt(.b)		d0:speed,d1:src level,d2:dest level,bit=1でそのパラメータが存在
*speed(.w)	0-65535 0:でフェーダーは動かない
*src level(.b)	0-128
*dest level(.b)	0-128
*4-7bytes

*リピートスキップ	|n
repeat_skip_zmd:	equ	$d8
*$d8(.b)
*count(.w)	0-65534:1-65535
*offset(.l)	repeat_start_zmdのrep. workまでのオフセット
*offset(.l)	repeat_end_zmdの外までのオフセット
*11bytes

*リピートスキップ2	|
repeat_skip2_zmd:	equ	$d9
*$d9(.b)
*offset(.l)	repeat_start_zmdのrep. workまでのオフセット
*offset(.l)	次のrepeat_skip_zmdへの、またはrepeat_end_zmdまでのオフセット
*9bytes

*ピッチモジュレーション･振幅増加/減衰
pmod_deepen_zmd:	equ	$da
*$da(.b)
*omt(.b)		d7:deepen mode		[0]:OFF	1:ON
*		d6:speed		0:パラメータ有り 1:なし
*		d5:depth accelarator	0:パラメータ有り 1:なし
*		d4:repeat time		0:パラメータ有り 1:なし
*speed(v)	0-127(.b), 32768+(0-32767)(.w)
*depth(.w)	-32768～32767
*repeat time(v)	0-127(.b), 32768+(0-32767)(.w)	(0=∞)
*5-8bytes

*ＡＲＣＣ･振幅増加/減衰
arcc_deepen_zmd:	equ	$db
*$db(.b)
*arcc no(.b)	(0-3)×2
*omt(.b)		d7:deepen mode		[0]:OFF	1:ON
*		d6:speed		0:パラメータ有り 1:なし
*		d5:depth accelarator	0:パラメータ有り 1:なし
*		d4:repeat time		0:パラメータ有り 1:なし
*speed(v)	0-127(.b), 32768+(0-32767)(.w)
*depth(.b)	-128～127
*repeat time(v)	0-127(.b), 32768+(0-32767)(.w)	(0=∞)
*6-9bytes

*ベロシティ･振幅増加/減衰
vseq_deepen_zmd:	equ	$dc
*$dc(.b)
*omt(.b)		d7:deepen mode		[0]:OFF	1:ON
*		d6:speed		0:パラメータ有り 1:なし
*		d5:depth accelarator	0:パラメータ有り 1:なし
*		d4:repeat time		0:パラメータ有り 1:なし
*speed(v)	0-127(.b), 32768+(0-32767)(.w)
*depth(.b)	-128～127
*repeat time(v)	0-127(.b), 32768+(0-32767)(.w)	(0=∞)
*5-7bytes

*アゴーギク･振幅増加/減衰
agogik_deepen_zmd:	equ	$dd
*$dd(.b)
*omt(.b)		d7:deepen mode		[0]:OFF	1:ON
*		d6:speed		0:パラメータ有り 1:なし
*		d5:depth accelarator	0:パラメータ有り 1:なし
*		d4:repeat time		0:パラメータ有り 1:なし
*speed(v)	0-127(.b), 32768+(0-32767)(.w)
*depth(.w)	-32768～32767
*repeat time(v)	0-127(.b), 32768+(0-32767)(.w)	(0=∞)
*6-8bytes

*音色スプリット
timbre_split_zmd:	equ	$de
*$de(.b)
*n of param(.b)			d7:スイッチ(0:OFF,1:ON)
*				d0-d6:パラメータの数:0-8
*{
*range start note no.(.b)	0-127
*range End note no.(.b)		0-127
*bank no.(.w)			0-16383(MIDI)/0-255(FM,ADPCM)
*timbre no.(.w)			0-127 or 0-32767
*}×(n of param)
*2-50bytes

*エンハンスドベロシティシーケンス波形セレクト
vseq_wf_zmd:	equ	$df
*$df(.b)
*omt(.b)	d0:wave form d1:origin d2:phase (bit=1でそのパラメータが存在)
*wave form(.w)	0-7:preset waveform	$8000+0～32767～:user waveform
*							→p_arcc_wf+p_vseq_param
*origin(.b)	0-127:波形の基準値
*phase(.b)	0:正位相,-1:逆位相
*3～6bytes
*-------------------------------------------------$e0～(?bytes系)
*オートベンド@B range
bend_@b_zmd:	equ	$e0
*$e0(.b)
*omt(.b)		d7:src dtn  d6:dest dtn  d5:delay  d4:tail/port.time
*				(各ビット=1のとき後ろに対応パラメータが続く)
*				(omt=0のときスイッチオフ)
*src  detune(.w)	-32768～32767			→p_detune
*dest detune(.w)	-32768～32767			→p_bend_dst
*delay(w)		-32768～32767			→p_bend_dly/p_port_cnt
*tail(.w)	1-32767:bend time,0:無指定,-1～-32768:tail time	→p_bend_tail
*2-10bytes

*オートベンド@K range
bend_@k_zmd:	equ	$e1
*$e1(.b)
*omt(.b)		d7:src dtn  d6:dest dtn  d5:delay  d4:tail/port.time
*				(各ビット=1のとき後ろに対応パラメータが続く)
*				(omt=0のときスイッチオフ)
*src  detune(.w)	-32768～32767			→p_detune
*dest detune(.w)	-32768～32767			→p_bend_dst
*delay(w)		-32768～32767			→p_bend_dly/p_port_cnt
*tail(.w)		1-32767:bend time,0:無指定,-1～-32768:tail time	→p_bend_tail
*2-10bytes

*ピッチモジュレーション振幅 (1/8,optional 8point)
pmod8_zmd:	equ	$e2
*$e2(.b)
*mode(.b)		0:no touch 1:optional -1:1/8 2:以前のモードでON
*omt(.b)		%0000_0001-%1111_1111 (omtのbit=1の数だけパラメータが存在する)
*depth(.w)*(1-8)	-32768～32767		ただしomt=0のときがスイッチオフ)
*						→p_pmod_dpt_tbl
*5-19bytes

*ピッチモジュレーション・スピード (8point)	@S
pmod_speed8_zmd:	equ	$e3
*$e3(.b)
*omt(.b)		%0000_0001-%1111_1111 (omtのbit=1の数だけパラメータが存在する)
*speed(.w)*(1-8)	1-65535		ただし0はエラー,値は与えられたものを2倍したもの
*						→p_pmod_spd_tbl
*4-18bytes

*ピッチモジュレーション・ディレイ (8point)	@H
pmod_delay8_zmd:	equ	$e4
*$e4(.b)
*omt(.w)		%0_0000_0001-%1_1111_1111 (omtのbit=1の数だけパラメータが存在する/最大９個
*						ただし0はエラー)
*delay(.w)*(1-9)	0-65535				→p_pmod_1st_dly～p_pmod_8st_tbl
*5-21bytes

*ＡＲＣＣ振幅 (1/8,optional 8point)				@A
arcc8_zmd:	equ	$e5
*$e5(.b)
*arcc no(.b)	(0-3)×2
*mode(.b)	0:no touch 1:optional -1:1/8 2:以前のモードでON
*omt(.b)		%0000_0001-%1111_1111 (omtのbit=1の数だけパラメータが存在する
*depth(.b)*(1-8)	-128～127		ただしomt=0のときがスイッチオフ)
*						→p_arcc_dpt_tbl
*5-12bytes

*ＡＲＣＣスピード (8point)			@S
arcc_speed8_zmd:	equ	$e6
*$e6(.b)
*arcc no(.b)	(0-3)×2
*omt(.b)		%0000_0001-%1111_1111 (omtのbit=1の数だけパラメータが存在する)
*speed(.w)*(1-8)	1-65535			ただし0はエラー,値は与えられたものを2倍したもの
*						→p_arcc_spd_tbl
*5-19bytes

*ＡＲＣＣディレイ (8point)			@H
arcc_delay8_zmd:	equ	$e7
*$e7(.b)
*arcc no(.b)	(0-3)×2
*omt(.w)		%0_0000_0001-%1_1111_1111 (omtのbit=1の数だけパラメータが存在する/最大９個)
*delay(.w)*(1-9)	0-65535				→p_arcc_1st_dly～p_arcc_8st_tbl
*6-22bytes

*アフタータッチシーケンス(1/8,optional 8point)	@Z
aftertouch_zmd:	equ	$e8
*$e8(.b)
*mode(.b)	0:no touch 1:optional -1:1/8 2:以前のモードでON
*omt(.b)		%0000_0000-%1111_1111 (omtのbit=1の数だけパラメータが存在する
*					ただしomt=0のときがスイッチオフ)
*rltvmark(.b)	%0000_0000-%1111_1111 (rltvmarkのbit=1が相対指定を表す)
*depth(.b)*(1-8)	0-127			→p_aftc_tbl
*5-12bytes

*アフタータッチシーケンス・ディレイ	(8point)
aftc_delay8_zmd:	equ	$e9
*$e9(.b)
*omt(.w)		%0_0000_0001-%1_1111_1111 (omtのbit=1の数だけパラメータが存在する/最大９個)
*delay(.w)*(1-9)	0-65535				→p_aftc_8st_tbl
*5-21bytes

*エンハンスドベロシティ・シーケンス振幅	(8point)
vseq8_zmd:	equ	$ea
*$ea(.b)
*mode(.b)	0:no touch 1:optional 2:以前のモードでON
*omt(.b)		%0000_0001-%1111_1111 (omtのbit=1の数だけパラメータが存在する
*depth(.b)*(1-8)	-128～127		ただしomt=0のときがスイッチオフ)
*						→p_arcc_dpt_tbl+p_vseq_param
*4-11bytes

*エンハンスドベロシティ・シーケンス・スピード	(8point)
vseq_speed8_zmd:	equ	$eb
*$eb(.b)
*omt(.b)		%0000_0001-%1111_1111 (omtのbit=1の数だけパラメータが存在する)
*speed(.w)*(1-8)	1-65535			ただし0はエラー,値は与えられたものを2倍したもの
*						→p_arcc_spd_tbl+p_vseq_param
*4-18bytes

*エンハンスドベロシティ・シーケンス・ディレイ	(8point)
vseq_delay8_zmd:	equ	$ec
*$ec(.b)
*omt(.w)		%0_0000_0001-%1_1111_1111 (omtのbit=1の数だけパラメータが存在する/最大９個)
*delay(.w)*(1-9)	0-65535				→p_arcc_8st_tbl+p_vseq_param
*5-21bytes

*アゴーギク・振幅	(1/8,optional 8point)
agogik8_zmd:	equ	$ed
*$ed(.b)
*mode(.b)	0:no touch 1:optional -1:1/8 2:以前のモードでON
*omt(.b)		%0000_0000-%1111_1111 (omtのbit=1の数だけパラメータが存在する
*depth(.w)*(1-8)	-32768～32767		ただしomt=0のときがスイッチオフ)
*						→(agogik_work_ptr)+p_pmod_dpt_tbl
*5-19bytes

*アゴーギク・スピード	(8point)
agogik_speed8_zmd:	equ	$ee
*$ee(.b)
*omt(.b)		%0000_0001-%1111_1111 (omtのbit=1の数だけパラメータが存在する)
*speed(.w)*(1-8)	1-65535			ただし0はエラー,値は与えられたものを2倍したもの
*						→(agogik_work_ptr)+p_pmod_spd_tbl
*4-18bytes

*アゴーギク・ディレイ	(8point)
agogik_delay8_zmd:	equ	$ef
*$ef(.b)
*omt(.w)		%0_0000_0001-%1_1111_1111 (omtのbit=1の数だけパラメータが存在する/最大９個)
*delay(.w)*(1-9)	0-65535				→(agogik_work_ptr)+p_pmod_8st_tbl
*5-21bytes

*エフェクト設定
effect_ctrl_zmd:	equ	$f0
*$f0(.b)
*omt(.b)		%0000_0001-%1111_1111 (omtのbit=1の数だけパラメータが存在する
*value(.b)*(1-5)				ただしomt=0はエラー)
*		omt:value
*NORMAL case	d0:effect1(RVB)(0-127)  d1:effect3(CHO)(0-127)  d2:effect4(DLY)(0-127)
*		d3:effect2(0-127)  d4:effect5(0-127)
*						→p_effect1～5
*		omt:value
*MT32 case	d0:PART no.(0～7 or 8(rhythm))  d1:switch(0,1)
*
*data(.b)*1～8
*3-10bytes

*ワーク直接書き換え
poke_zmd:	equ	$f1
*$f1(.b)
*mode(.b)	d0～d3:0=data(.b)  1=data(.w)  3=data(.l)	(for dbra loop counter)
*		d4～d7:0=addr(.b)  1=addr(.w)  3=addr(.l)	(for dbra loop counter)
*addr offset(b/w/l)	-2147483648～2147483647
*data (b/w/l)		0～4294967295
*4-10bytes

*相対ワーク直接書き換え
rltv_poke_zmd:	equ	$f2
*$f2(.b)
*mode(.b)	d0～d3:0:data(.b)  1:data(.w)  3=data(.l)	(for dbra loop counter)
*		d4～d7:0:addr(.b)  1:addr(.w)  3=addr(.l)	(for dbra loop counter)
*addr offset(v)	-2147483648～2147483647
*data offset(v)	-2147483648～2147483647
*4-10bytes

*エクスクルーシブ	x
exclusive_zmd:	equ	$f3
*$f3(.b)
*exclusive mode(.b)	0-255		-1:none $41:Roland $43:YAMAHA
*str length(.b)		0-255		コメント文字列長
*string data...				コメント文字列(no endcode)
*data length(.l)	1～
*data(.b).....		0-127		(exclusive mode=$41,$43のとき、
*					 チェックサムが自動送信される)
*8～?bytes
MKID_ROLAND:	equ	$41
MKID_YAMAHA:	equ	$43

*生MIDIデータ転送
midi_transmission_zmd:	equ	$f4
*$f4(.b)
*str length(.b)		0-255		コメント文字列長
*string data...				コメント文字列(no endcode)
*data length(.l)	1～
*data(.b).....	0-127
*7～?bytes

*ループ終端
loop_zmd:	equ	$f5
*$f5(.b)
*offset(.l)*n	演奏中のZMD任意の箇所を初期化、offset=0で初期化フェーズ終了
*5～?bytes

*オートポルタメント
auto_portament_zmd:	equ	$f6
*$f6(.b)
*mode(.b)	0:off 1:on -1:no touch		→p_port2_flg
*omt(.b)	d7:delay  d6:tail/port.time	各bit=1の時,そのパラメータが後ろに続いている
*delay(w)	-32768～32767					→p_port2_dly
*tail(.w)	1-32767:port time,0:無指定,-1～32768:tail time	→p_port2_tail
*3-7bytes

*ＡＲＣＣアサイン		@C
asgn_arcc_zmd:	equ	$f7
*$f7(.b)
*arcc no(.b)		(0-3)×2
*omt(.b)			d7:ctrl device  d6:reset value  d5:origin d4:phase
*					(各ビット=1のとき後ろに対応パラメータが続く)
*ctrl device(.b)		MIDI:0-127	FM:$80=pan,$81=pms,$82=ams,$83=reserved
*						   $84=amd,$85=pmd,$86=lfo spd,$87=noise spd
*reset value(.b)		MIDI:0-127	FM:0-255
*origin(.b)			MIDI:0-127	FM:0-255
*phase(.b)			0:正位相,-1:逆位相
*4-7bytes

*イベント制御
event_zmd:	equ	$f8
*$f8(.b)
*size(.l)		データのサイズ	category(.b),class(.b),dummy(.w),data(?)すべての合計
*category(.b)		データの種類	0:word  1:picture  2:sound  3～255:RESERVED
*object class(.b)	データの具体的な種類
*dummy(.w)		将来拡張用
*data...		データ		データ構造はcategory,classによって違う
*
*category=0:wordの時
*$f8(.b)
*size(.l)		サイズ=0のときはdata部は0で終了するファイルネーム文字列
*category(.b)		0:word(歌詞)
*object class(.b)	0:単なる文字列	1～255:RESERVED
*dummy(.w)
*data...		(size.l=0で0(.b)を終端コードに持つ文字列)
*?bytes
*
*category=1:pictureの時
*$f8(.b)
*size(.l)		サイズ=0のときはdata部は0で終了するファイルネーム文字列
*category(.b)		1:picture(画像)
*object class(.b)	0:PICファイル 1:PIC2 2:JPEG 3:MAG 4～255:RESERVED
*dummy(.w)
*data...		(size.l=0で0(.b)を終端コードに持つファイルネーム文字列)
*?bytes
*
*category=2:soundの時
*$f8(.b)
*size(.l)		サイズ=0のときはdata部は0で終了するファイルネーム文字列
*category(.b)		2:sound(音声)
*object class(.b)	0:ADPCM(15kHz)	1～255:RESERVED
*dummy(.w)
*data...		(size.l=0で0(.b)を終端コードに持つファイルネーム文字列)
*?bytes
*
*(カテゴリやクラスの新設追加は利用希望者がその都度ZMUSIC事務局に申請する)
*-------------------------------------------------$f9～(1bytes系)
*リターン(GOSUB命令の次のアドレスへ帰還)
return_zmd:	equ	$f9
*$f9(.b)
*1byte

*ダミーZMD
next_cmd_zmd:	equ	$fa
*$fa(.b)
*1byte

*同期待ち		W
waiting_zmd:	equ	$fb
*$fb(.b)
*1byte

*FINE		[fine]
fine_zmd:	equ	$fc
*$fc(.b)
*1byte

*小節線
measure_zmd:	equ	$fe
*$fe(.b)
*1byte

*演奏データ終端
play_end_zmd:	equ	$ff
*$ff(.b)
*1byte
*-----------------------------------------------------------------------------
